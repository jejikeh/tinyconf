// Code generated by "stringer -type=TokenType"; DO NOT EDIT.

package lexer

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Sum-0]
	_ = x[Div-1]
	_ = x[Sub-2]
	_ = x[Mul-3]
	_ = x[Push-4]
	_ = x[Duplicate-5]
	_ = x[Jump-6]
	_ = x[JumpIfTrue-7]
	_ = x[Equal-8]
	_ = x[LabelDeclaration-9]
	_ = x[OperandString-10]
	_ = x[OperandNumber-11]
}

const _TokenType_name = "SumDivSubMulPushDuplicateJumpJumpIfTrueEqualLabelDeclarationOperandStringOperandNumber"

var _TokenType_index = [...]uint8{0, 3, 6, 9, 12, 16, 25, 29, 39, 44, 60, 73, 86}

func (i TokenType) String() string {
	if i < 0 || i >= TokenType(len(_TokenType_index)-1) {
		return "TokenType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TokenType_name[_TokenType_index[i]:_TokenType_index[i+1]]
}
